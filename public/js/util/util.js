define('util', [ 'jQuery', 'underscore', 'variable', 'query' ], function ( jquery, _, v , query){	var q = new query();	var Util = function (){};	_.templateSettings = {		evaluate : /\{%([\s\S]+?)\%\}/g,		interpolate : /\{%=([\s\S]+?)\%\}/g,		escape : /\{%-([\s\S]+?)%\}/g	};	Util.prototype = {		constructor : Util,		currentPaths : [],		drivesItem : null,		anyFiles : null,		clearData : function (){			this.currentPaths.length = 0;			this.currentPaths = [];			return true;		},		formatURL : function ( path ){			//进来的路径如果找到“:”，则说明是一个盘符，清空当前数组,重新排列			path.indexOf(":") > -1 && this.clearData();			//将当前路径push进当前数组			this.currentPaths.push( path );			var finallyPath = this.currentPaths.reduce(function ( pre, current, index, array ){				//如果数组的pre位的len-1位是“/”,分隔符就不用加“/”				var $join = pre.slice(-1) === "/" ? "" : "/";				return pre + $join + current;			});			//数组已经被拼接为一个字符串,格式大概是这样的 c:/windows/,或者 c:/windows			//所以要对字符串做一下处理,当字符串的最后一位是“/”时，就不用加“/”了			if( finallyPath.slice(-1) !== "/" ) finallyPath += "/";			//赋值进路径展示框			v.currentReallyPath.val( finallyPath );			//把最终结果return出去			return finallyPath;		},		renderTemplate : function ( options ){			var config = {				template : v.filesListsTemplate,				wrapper : v.filesLists,				method : "html",				data : {}			};			var r = _.extend(config, options);			var render = _.template(r.template );			var _temp = render(r.data);			return r.wrapper[r.method]( _temp);		},		//获取文件列表		getFileList : function ( path, callback ){			var self = this;			var p = this.formatURL( (Array.isArray(path) ? path[0] : path) );			q.getFileList( p, function ( err, data ){				self.renderTemplate({ data : { "files" : data } }) && self.reset();				var prePath = p.replace(/((\w|\-|\.)+\/)$/gi,"");				v.filePre.attr({"data-path":prePath});				v.currentReallyPath.val().length > 3 ? v.filePre.show() : v.filePre.hide();				return callback && callback();			});		},		reInit : function (){			this.drivesItem = v.drives.find(".drivesItem");			this.anyFiles = v.filesLists.find("li");			return true;		},		reBind : function ( obj ){			var self = this;			return obj.off("click").on("click", function (){				var $dataPath = $(this).attr("data-path");				if( !$dataPath ) return;				var _data = $dataPath.indexOf("file!") > -1 ? $dataPath.replace("file!", "") : $dataPath;				self.getFileList( _data );			});		},		reset : function (){			this.reInit() && this.reBind(this.drivesItem) && this.reBind(this.anyFiles);		}	};	return Util;});